package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"time"
)

// Mundo is the resolver for the mundo field.
func (r *mutationResolver) Mundo(ctx context.Context, name string) (string, error) {
	return "not implemented: Mundo - mundo: " + name, nil
}

// Hola is the resolver for the hola field.
func (r *queryResolver) Hola(ctx context.Context) (string, error) {
	return "not implemented: Hola - hola", nil
}

// X is the resolver for the x field.
func (r *subscriptionResolver) X(ctx context.Context) (<-chan string, error) {
	// Crear un canal de solo lectura
	a := make(chan string)

	// Usar una gorutina para manejar la lógica de envío de datos al canal
	go func() {
		defer close(a) // Asegurarte de cerrar el canal cuando termines

		// Simular envío de mensajes al canal
		for i := 0; i < 5; i++ {
			select {
			case <-ctx.Done(): // Si el contexto se cancela, sal de la gorutina
				return
			case a <- fmt.Sprintf("Mensaje %d", i): // Enviar un mensaje al canal
				time.Sleep(1 * time.Second) // Simular algún procesamiento
			}
		}
	}()

	return a, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
